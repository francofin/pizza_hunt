Indexeddb. 
client side storage, key value store, but key nor value is required to be a string
Process the data asynchronously
Local storage and session storage are synchronous so it takes a bit longer. 
Lives on the client, Every operation is done with a transaction. 
create idb.js in public folder. 
Once that's created, we'll add it to the add-pizza.html file, 
towards the bottom of the file and right under the other <script> tag, as shown in the following code:
Now that the page for adding a pizza includes the idb.js file, let's establish a connection to IndexedDB.

Here, we create a variable db that will store the connected database object when the connection is complete.
After that, we create the request variable to act as an event listener for the database.
That event listener is created when we open the connection to the database using the indexedDB.open() method.
As part of the browser's window object, indexedDB is a global variable.
Thus, we could say window.indexedDB, but there's no need to. The .open() method we use here takes the following two parameters:
The name of the IndexedDB database you'd like to create (if it doesn't exist) or connect to (if it does exist). We'll use the name pizza_hunt.

The version of the database. By default, we start it at 1. 
This parameter is used to determine whether the database's structure has changed between connections. 
Think of it as if you were changing the columns of a SQL database.
In SQL, tables hold the data; likewise, in MongoDB, collections hold the data. 
In IndexedDB, the container that stores the data is called an object store. 
We can't create an object store until the connection to the database is open, 
emitting an event that the request variable will be able to capture.
The listener we just added will handle the event of a change that needs to be made to the database's structure. 
 IndexedDB infers that a change needs to be made when the database is first connected 
 (which we're doing now) or if the version number changes.
 Thus, this onupgradeneeded event will emit the first time we run this code and create the new_pizza object store.
 The event won't run again unless we delete the database from the browser or we change the version number in the 
 .open() method to a value of 2, indicating that our database needs an update.

 When this event executes, we store a locally scoped connection to the database and use the
.createObjectStore() method to create the object store that will hold the pizza data
With IndexedDB, we have a veritable blank slateâ€”we'll have to establish all of the rules for working with the database.
For that reason, when we create the new_pizza object store, 
we also instruct that store to have an auto incrementing index for each new set of data we insert. 

With this first event handler, onsuccess, we set it up so that when we finalize the connection to the database, 
we can store the resulting database object to the global variable db we created earlier.
This event will also emit every time we interact with the database, 
so every time it runs we check to see if the app is connected to the internet network.
 If so, we'll execute the uploadPizza() function.
 We also added the onerror event handler to inform us if anything ever goes wrong with the database interaction.
 With IndexedDB, we don't always have that direct connection like we do with SQL and MongoDB databases, 
 so methods for performing CRUD operations with IndexedDB aren't available at all times.
 Instead, we have to explicitly open a transaction, or a temporary connection to the database.
 This will help the IndexedDB database maintain an accurate reading of the data it stores so that data isn't in flux all the time.
 Once we open that transaction, we directly access the new_pizza object store, because this is where we'll be adding data.
 Finally, we use the object store's .add() method to insert data into the new_pizza object store.
 This saveRecord() function will be used in the add-pizza.js file's 
 form submission function if the fetch() function's .catch() method is executed.

 Because the object stores can be used for both small and large file storage, 
 the .getAll() method is an asynchronous function that we have to attach an event handler to in order to retrieve the data. 
 Now the getAll.onsuccess event will execute after the .getAll() method completes successfully. 
 At that point, the getAll variable we created above it will have a 
 .result property that's an array of all the data we retrieved from the new_pizza object store.
 If there's data to send, we send that array of data we just retrieved to the server at the POST /api/pizzas endpoint. 
 